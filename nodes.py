import torch
from torch import nn
#from einops.layers.torch import Rearrange, Reduce
import numpy as np
from functools import partial
#from self_attention_cv import AxialAttentionBlock
import torch.nn.functional as F

class AconC(nn.Module):
    r""" ACON activation (activate or not).
    # AconC: (p1*x-p2*x) * sigmoid(beta*(p1*x-p2*x)) + p2*x, beta is a learnable parameter
    # according to "Activate or Not: Learning Customized Activation" <https://arxiv.org/pdf/2009.04759.pdf>.
    """

    def __init__(self, width):
        super().__init__()
        self.p1 = nn.Parameter(torch.randn(1, width, 1, 1))
        self.p2 = nn.Parameter(torch.randn(1, width, 1, 1))
        self.beta = nn.Parameter(torch.ones(1, width, 1, 1))

    def forward(self, x):
        return (self.p1 * x - self.p2 * x) * torch.sigmoid(self.beta * (self.p1 * x - self.p2 * x)) + self.p2 * x


class MetaAconC(nn.Module):
    r""" ACON activation (activate or not).
    # MetaAconC: (p1*x-p2*x) * sigmoid(beta*(p1*x-p2*x)) + p2*x, beta is generated by a small network
    # according to "Activate or Not: Learning Customized Activation" <https://arxiv.org/pdf/2009.04759.pdf>.
    """

    def __init__(self, width, r=16):
        super().__init__()
        self.fc1 = nn.Conv2d(width, max(r, width // r), kernel_size=1, stride=1, bias=True)
        self.bn1 = nn.BatchNorm2d(max(r, width // r))
        self.fc2 = nn.Conv2d(max(r, width // r), width, kernel_size=1, stride=1, bias=True)
        self.bn2 = nn.BatchNorm2d(width)

        self.p1 = nn.Parameter(torch.randn(1, width, 1, 1))
        self.p2 = nn.Parameter(torch.randn(1, width, 1, 1))

    def forward(self, x):
        beta = torch.sigmoid(
            self.bn2(self.fc2(self.bn1(self.fc1(x.mean(dim=2, keepdims=True).mean(dim=3, keepdims=True))))))
        return (self.p1 * x - self.p2 * x) * torch.sigmoid(beta * (self.p1 * x - self.p2 * x)) + self.p2 * x


class swish(nn.Module):
    def __init__(self):
        super(swish, self).__init__()

    def forward(self,x):
        x = x * torch.sigmoid(x)
        return x

# CNN Operators
class Conv(nn.Module):
    def __init__(self, ic, oc, ks):
        super(Conv, self).__init__()
        self.out_channel = oc
        self.in_channel = ic
        self.kernel_size = ks
        self.padding=ks // 2
        # print(self.padding)
        self.conv = nn.Conv2d(
                in_channels=self.in_channel,
                out_channels=self.out_channel,
                kernel_size=self.kernel_size,
                stride=1,
                padding=self.padding
            )
            # Activitation
        self.activate=swish()
            # Normalization


        self.bn=nn.BatchNorm2d(self.out_channel)
        #self.activate=MetaAconC(oc,16)
    def forward(self, x):
        # print(self.in_channel,self.out_channel)
        x = self.conv(x)
        # x = F.relu(x)
        x = self.bn(x)
        x = F.relu(x)
        #x=self.activate(x)
        return x


class SeparableConv2d(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size=1, stride=1, padding=0, dilation=1, bias=False):
        super(SeparableConv2d, self).__init__()

        self.conv1 = nn.Conv2d(in_channels, in_channels, kernel_size, stride, padding, dilation, groups=in_channels,
                               bias=bias)
        self.pointwise = nn.Conv2d(in_channels, out_channels, 1, 1, 0, 1, 1, bias=bias)

    def forward(self, x):
        x = self.conv1(x)
        x = self.pointwise(x)
        return x


class FactorizedReduce(nn.Module):
  def __init__(self, C_in, C_out, affine=True):
    super(FactorizedReduce, self).__init__()
    assert C_out % 2 == 0
    self.relu = nn.ReLU(inplace=False)
    self.conv_1 = nn.Conv2d(C_in, C_out // 2, 1, stride=2, padding=0, bias=False)
    self.conv_2 = nn.Conv2d(C_in, C_out // 2, 1, stride=2, padding=0, bias=False)
    self.bn = nn.BatchNorm2d(C_out, affine=affine)

  def forward(self, x):
    x = self.relu(x)
    out = torch.cat([self.conv_1(x), self.conv_2(x[:,:,1:,1:])], dim=1)
    out = self.bn(out)
    return out


class MNv1Block(nn.Module):#depthwise seperable conv with BN and ReLU
    '''Depthwise conv + Pointwise conv'''

    def __init__(self, in_planes,kernel_size,stride=1):
        super(MNv1Block, self).__init__()
        out_planes=in_planes
        self.conv1 = nn.Conv2d \
            (in_planes, in_planes, kernel_size=kernel_size, stride=stride,
                padding=kernel_size//2, groups=in_planes, bias=False)
        self.bn1 = nn.BatchNorm2d(in_planes)
        self.conv2 = nn.Conv2d \
            (in_planes, out_planes, kernel_size=1,
                stride=1, padding=0, bias=False)
        self.bn2 = nn.BatchNorm2d(out_planes)
        self.activate1 = swish()
        self.activate2 = swish()
        # self.activate1 = MetaAconC(out_planes, 16)
        # self.activate2 = MetaAconC(out_planes, 16)
    def forward(self, x):
        # out = F.relu(self.bn1(self.conv1(x)))
        # out = F.relu(self.bn2(self.conv2(out)))
        out = self.activate1(self.bn1(self.conv1(x)))
        out = self.activate2(self.bn2(self.conv2(out)))
        return out

class MNv2Block(nn.Module):
    def __init__(self, in_planes,kernel_size, expansion, stride):
        super(MNv2Block, self).__init__()
        self.stride = stride

        planes = expansion * in_planes
        self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=1, stride=1, padding=0, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=kernel_size,
                               stride=stride, padding=kernel_size//2, groups=planes,
                               bias=False)
        self.bn2 = nn.BatchNorm2d(planes)
        self.conv3 = nn.Conv2d(planes, in_planes, kernel_size=1,
                               stride=1, padding=0, bias=False)
        self.bn3 = nn.BatchNorm2d(in_planes)
        self.activate1 = swish()
        self.activate2 = swish()
        #self.activate1 = MetaAconC(planes, 16)
        #self.activate2 = MetaAconC(in_planes, 16)
        '''
        self.shortcut = nn.Sequential()
       
        if stride == 1 and in_planes != in_planes:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_planes, in_planes, kernel_size=1,
                          stride=1, padding=0, bias=False),
                nn.BatchNorm2d(in_planes),
            )
        '''
    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = F.relu(self.bn2(self.conv2(out)))
        #out = self.activate1(self.bn1(self.conv1(x)))
        #out = self.activate2(self.bn2(self.conv2(out)))
        out = self.bn3(self.conv3(out))
        #out = out + self.shortcut(x) if self.stride == 1 else out
        return out

class resblock(nn.Module): ## that is a part of model
    def __init__(self,inchannel,outchannel,stride=1):
        super(resblock,self).__init__()
        ## conv branch
        self.left = nn.Sequential(     ## define a serial of  operation
            nn.Conv2d(inchannel,outchannel,kernel_size=3,stride=stride,padding=1),
            nn.BatchNorm2d(outchannel),
            nn.ReLU(inplace=True),
            nn.Conv2d(outchannel,outchannel,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(outchannel))
        ## shortcut branch
        self.short_cut = nn.Sequential()
        if stride !=1 or inchannel != outchannel:
            self.short_cut = nn.Sequential(
                nn.Conv2d(inchannel,outchannel,kernel_size=1,stride=stride,bias=False),
                nn.BatchNorm2d(outchannel))
    ### get the residual
    def forward(self,x):
        return F.relu(self.left(x) + self.short_cut(x))
# Denseblock+TransitionBlock
class DenseLayer(nn.Module):
    def __init__(self, in_channels, bottleneck_size, growth_rate):
        super(DenseLayer, self).__init__()
        count_of_1x1 = bottleneck_size
        self.bn1 = nn.BatchNorm2d(in_channels)
        self.relu1 = nn.ReLU(inplace=True)
        self.conv1x1 = nn.Conv2d(in_channels, count_of_1x1, kernel_size=1)

        self.bn2 = nn.BatchNorm2d(count_of_1x1)
        self.relu2 = nn.ReLU(inplace=True)
        self.conv3x3 = nn.Conv2d(count_of_1x1, growth_rate, kernel_size=3, padding=1)

    def forward(self, *prev_features):
        # for f in prev_features:
        #     print(f.shape)

        input = torch.cat(prev_features, dim=1)
        # print(input.device,input.shape)
        # for param in self.bn1.parameters():
        #     print(param.device)
        # print(list())
        bottleneck_output = self.conv1x1(self.relu1(self.bn1(input)))
        out = self.conv3x3(self.relu2(self.bn2(bottleneck_output)))

        return out
class _DenseBlock(nn.Module):
    def __init__(self,in_channels,layer_counts,growth_rate):
        super(_DenseBlock,self).__init__()
        self.layer_counts = layer_counts
        self.layers = []
        for i in range(layer_counts):
            curr_input_channel = in_channels + i*growth_rate
            bottleneck_size = 4*growth_rate #论文里设置的1x1卷积核是3x3卷积核的４倍.
            layer = DenseLayer(curr_input_channel,bottleneck_size,growth_rate).cuda()
            self.layers.append(layer)

    def forward(self,init_features):
        features = [init_features]
        for layer in self.layers:
            layer_out = layer(*features) #注意参数是*features不是features
            features.append(layer_out)

        return torch.cat(features, 1)
class TransitionLayer(nn.Sequential):
    def __init__(self, in_channels, out_channels):
        super(TransitionLayer, self).__init__()
        self.add_module('norm', nn.BatchNorm2d(in_channels))
        self.add_module('relu', nn.ReLU(inplace=True))
        self.add_module('conv', nn.Conv2d(in_channels, out_channels,kernel_size=1, stride=1, bias=False))
        self.add_module('pool', nn.AvgPool2d(kernel_size=2, stride=2))

class DenseBlock(nn.Module):
    def __init__(self,in_channels,layers_counts,growth_rate):
        super(DenseBlock,self).__init__()
        self.dense_block_layers=nn.Sequential()
        block = DenseBlock(in_channels=in_channels, layer_counts=layers_counts, growth_rate=growth_rate)
        self.dense_block_layers.add_module(block)
        block_out_channels = in_channels + layers_counts * growth_rate
        transition = TransitionLayer(block_out_channels, block_out_channels // 2)
        self.dense_block_layers.add_module(transition)

# Attention in CNN
class SpatialAttention(nn.Module):
    def __init__(self,kernel_size):
        super(SpatialAttention, self).__init__()
        self.kernel_size=kernel_size

        self.conv2d = nn.Conv2d(in_channels=2, out_channels=1, kernel_size=self.kernel_size, stride=1, padding=self.kernel_size//2)
        self.sigmoid = nn.Sigmoid()


    def forward(self, x):
        avgout = torch.mean(x, dim=1, keepdim=True)
        maxout, _ = torch.max(x, dim=1, keepdim=True)
        out = torch.cat([avgout, maxout], dim=1)
        out = self.sigmoid(self.conv2d(out))
        res = x * out
        return res


class ChannelAttention(nn.Module):
    def __init__(self, in_planes):
        super(ChannelAttention, self).__init__()
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.max_pool = nn.AdaptiveMaxPool2d(1)
        if in_planes>8:
            hidden_size=in_planes//8
        else:
            hidden_size=1
        self.fc1 = nn.Conv2d(in_planes, hidden_size,1, bias=False)
        self.relu1 = nn.ReLU()
        self.fc2 = nn.Conv2d(hidden_size, in_planes, 1, bias=False)

        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        avg_out = self.fc2(self.relu1(self.fc1(self.avg_pool(x))))
        max_out = self.fc2(self.relu1(self.fc1(self.max_pool(x))))
        out = avg_out + max_out
        out =self.sigmoid(out)
        res = x * out
        return res


class CBAModule(nn.Module):
    def __init__(self,in_channels,kernel_size):
        super(CBAModule,self).__init__()
        self.CA=ChannelAttention(in_channels)
        self.SA=SpatialAttention(kernel_size)

    def forward(self,x):
        x=self.CA(x)
        x=self.SA(x)
        return x


class h_sigmoid(nn.Module):
    def __init__(self, inplace=True):
        super(h_sigmoid, self).__init__()
        self.relu = nn.ReLU6(inplace=inplace)

    def forward(self, x):
        return self.relu(x + 3) / 6


class h_swish(nn.Module):
    def __init__(self, inplace=True):
        super(h_swish, self).__init__()
        self.sigmoid = h_sigmoid(inplace=inplace)

    def forward(self, x):
        return x * self.sigmoid(x)


class CoordinateAttention(nn.Module):
    def __init__(self, inp, reduction=32):
        super(CoordinateAttention, self).__init__()
        self.pool_h = nn.AdaptiveAvgPool2d((None, 1))
        self.pool_w = nn.AdaptiveAvgPool2d((1, None))

        mip = max(8, inp // reduction)
        oup = inp
        self.conv1 = nn.Conv2d(inp, mip, kernel_size=1, stride=1, padding=0)
        self.bn1 = nn.BatchNorm2d(mip)
        self.act = h_swish()

        self.conv_h = nn.Conv2d(mip, oup, kernel_size=1, stride=1, padding=0)
        self.conv_w = nn.Conv2d(mip, oup, kernel_size=1, stride=1, padding=0)

    def forward(self, x):
        identity = x

        n, c, h, w = x.size()
        x_h = self.pool_h(x)
        x_w = self.pool_w(x).permute(0, 1, 3, 2)

        y = torch.cat([x_h, x_w], dim=2)
        y = self.conv1(y)
        y = self.bn1(y)
        y = self.act(y)

        x_h, x_w = torch.split(y, [h, w], dim=2)
        x_w = x_w.permute(0, 1, 3, 2)

        a_h = self.conv_h(x_h).sigmoid()
        a_w = self.conv_w(x_w).sigmoid()
		# 如果下面这个原论文代码用不了的话，可以换成另一个试试
        out = identity * a_w * a_h
        # out = a_h.expand_as(x) * a_w.expand_as(x) * identity
        return out



